package tpls

import (
	"bytes"
	"github.com/ucwebos/go2gen/domian/parser"
	"github.com/xbitgo/core/tools/tool_str"
	"strings"
	"text/template"
)

const GCITpl = `
// Code generated by xbit. DO NOT EDIT.
package {{.Pkg}}

import (
    "log"

    "github.com/go-redis/redis/v8"
	etcdv3 "go.etcd.io/etcd/client/v3"

    "github.com/xbitgo/core/di"
)

func _dIRegister() {
    {{- range .List}}
    inst{{.NameVal}}, err := {{$.SvName}}.{{.Name}}.CreateInstance()
    if err != nil {
        log.Panicf("init DI {{$.Pkg}}.{{.Name}}] err: %v", err)
    }
    di.Register("{{$.Pkg}}.{{.Name}}", inst{{.NameVal}})

    {{- end}}
}
{{ range .List}}
{{- if eq .Type "cfg.Etcd" }}
// Get{{.Name}} .
func (c *{{$.SName}}) Get{{.Name}}() *etcdv3.Client {
    inst := di.GetInst("{{$.Pkg}}.{{.Name}}")
    if v, ok := inst.(*etcdv3.Client); ok {
        return v
    }
    return nil
}
{{- else if eq .Type "cfg.Redis"}}
// Get{{.Name}} .
func (c *{{$.SName}}) Get{{.Name}}() *redis.Client {
    inst := di.GetInst("{{$.Pkg}}.{{.Name}}")
    if v, ok := inst.(*redis.Client); ok {
        return v
    }
    return nil
}
{{- end}}
{{ end}}
`

type GCI struct {
	Pkg    string // 包名
	SName  string // 结构体名称
	SvName string // 对象名称
	List   []DItem
}

func NewGCI(pkg string, xst parser.XST) *GCI {
	var (
		list = []DItem{}
	)
	for s, field := range xst.FieldList {
		if it := field.GetTag("gci"); it != nil {
			list = append(list, DItem{
				Name:    s,
				Type:    strings.TrimPrefix(field.Type, "*"),
				NameVal: tool_str.ToUFirst(s),
			})
		}
	}

	return &GCI{
		Pkg:    pkg,
		SName:  xst.Name,
		SvName: "App",
		List:   list,
	}
}

type DItem struct {
	Name          string // 结构体名称
	Type          string // 对象类型
	NameVal       string // 对象名称
	NewReturnsLen int    // 对象初始化方法返回
}

func (s *GCI) Execute() ([]byte, error) {
	buf := new(bytes.Buffer)
	tmpl, err := template.New("GCI").Parse(GCITpl)
	if err != nil {
		return nil, err
	}
	if err := tmpl.Execute(buf, s); err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
